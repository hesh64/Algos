from collections import deque

"""
Given a word, write a function to generate all of its unique generalized abbreviations.

Generalized abbreviation of a word can be generated by replacing each substring of the word by the count 
of characters in the substring. Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”. 
After replacing these substrings in the actual word by the count of characters we get all the generalized 
abbreviations: “ab”, “1b”, “a1”, and “2”."""


# O(N * 2^N) Time and Space

def generate_generalized_abbreviation(word):
    q = deque()
    i = 0
    q.append(word)
    while i < len(word):
        size = len(q)
        for _ in range(size):
            w = q.popleft()
            w1 = str(w)
            w2 = w[:i] + '1' + w[i + 1:]
            q.append(w1)
            q.append(w2)
        i += 1
    print(list(q))
    return [count(w, 0, 0) for w in list(q)]


def count(w, i, c):
    if i >= len(w):
        return str(c) if c > 0 else ''

    if w[i] == '1':
        return count(w, i + 1, c + 1)

    else:
        return str(c) + w[i] + count(w, i + 1, 0) if c > 0 else w[i] + count(w, i + 1, 0)


def main():
    print("Generalized abbreviation are: " +
          str(generate_generalized_abbreviation("BAT")))
    print("Generalized abbreviation are: " +
          str(generate_generalized_abbreviation("code")))


main()
